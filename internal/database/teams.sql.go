// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: teams.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createTeam = `-- name: CreateTeam :one
INSERT INTO teams (id , name,  team_industry , team_size , is_private , created_by) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, name, team_industry, team_size, is_private, created_by, created_at, updated_at
`

type CreateTeamParams struct {
	ID           uuid.UUID
	Name         string
	TeamIndustry string
	TeamSize     int32
	IsPrivate    bool
	CreatedBy    uuid.UUID
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, createTeam,
		arg.ID,
		arg.Name,
		arg.TeamIndustry,
		arg.TeamSize,
		arg.IsPrivate,
		arg.CreatedBy,
	)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TeamIndustry,
		&i.TeamSize,
		&i.IsPrivate,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createTeamMembership = `-- name: CreateTeamMembership :exec
INSERT INTO team_memberships (id, team_id, user_id, role) VALUES ($1, $2, $3, $4)
`

type CreateTeamMembershipParams struct {
	ID     uuid.UUID
	TeamID uuid.UUID
	UserID uuid.UUID
	Role   string
}

func (q *Queries) CreateTeamMembership(ctx context.Context, arg CreateTeamMembershipParams) error {
	_, err := q.db.ExecContext(ctx, createTeamMembership,
		arg.ID,
		arg.TeamID,
		arg.UserID,
		arg.Role,
	)
	return err
}

const getUserTeams = `-- name: GetUserTeams :many

SELECT 
    tm.team_id,
    t.name AS team_name,
    tm.role
FROM 
    team_memberships tm
JOIN 
    teams t ON tm.team_id = t.id
WHERE 
    tm.user_id = $1
`

type GetUserTeamsRow struct {
	TeamID   uuid.UUID
	TeamName string
	Role     string
}

func (q *Queries) GetUserTeams(ctx context.Context, userID uuid.UUID) ([]GetUserTeamsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserTeams, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserTeamsRow
	for rows.Next() {
		var i GetUserTeamsRow
		if err := rows.Scan(&i.TeamID, &i.TeamName, &i.Role); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
